import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime, timedelta
import json
import os

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)

focus_sessions = {}  # {guild_id: {"members": set(), "end_time": datetime}}
user_stats_file = "focus_stats.json"

# Charger les stats depuis un fichier JSON
if os.path.exists(user_stats_file):
    with open(user_stats_file, "r") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

# Sauvegarder les stats
def save_stats():
    with open(user_stats_file, "w") as f:
        json.dump(user_stats, f, indent=2)

@bot.event
async def on_ready():
    print(f"✅ FocusBot connecté en tant que {bot.user}")

@bot.command(name='startfocus')
async def start_focus(ctx, minutes: int):
    if minutes < 1 or minutes > 480:
        return await ctx.send("❗ Durée invalide. Choisis entre 1 et 480 minutes.")

    guild_id = ctx.guild.id
    end_time = datetime.utcnow() + timedelta(minutes=minutes)

    focus_sessions[guild_id] = {"members": {ctx.author.id}, "end_time": end_time, "duration": minutes}
    await ctx.send(f"🧠 Session de focus lancée pour {minutes} minutes par {ctx.author.mention} ! Rejoignez avec `/joinfocus`. 🕒")

    await asyncio.sleep(minutes * 60)

    for user_id in focus_sessions[guild_id]["members"]:
        str_id = str(user_id)
        user_stats.setdefault(str_id, 0)
        user_stats[str_id] += minutes
    save_stats()

    await ctx.send("⏰ La session de focus est terminée ! Bien joué à tous 🎉")
    del focus_sessions[guild_id]

@bot.command(name='joinfocus')
async def join_focus(ctx):
    guild_id = ctx.guild.id
    if guild_id in focus_sessions:
        focus_sessions[guild_id]["members"].add(ctx.author.id)
        end_time = focus_sessions[guild_id]["end_time"].strftime('%H:%M UTC')
        await ctx.send(f"✅ {ctx.author.mention} a rejoint la session de focus. Fin prévue à {end_time}.")
    else:
        await ctx.send("⚠️ Aucune session de focus en cours. Lancez-en une avec `/startfocus <minutes>`.")

@bot.command(name='endfocus')
async def end_focus(ctx):
    guild_id = ctx.guild.id
    if guild_id in focus_sessions:
        del focus_sessions[guild_id]
        await ctx.send(f"❌ {ctx.author.mention} a mis fin à la session de focus. Reposez-vous bien.")
    else:
        await ctx.send("⚠️ Aucune session de focus active à interrompre.")

@bot.command(name='mystats')
async def my_stats(ctx):
    user_id = str(ctx.author.id)
    total = user_stats.get(user_id, 0)
    heures = total // 60
    minutes = total % 60
    await ctx.send(f"📊 {ctx.author.mention}, tu as travaillé **{heures}h {minutes}min** en mode focus. Boss 👊")

@bot.command(name='leaderboard')
async def leaderboard(ctx):
    if not user_stats:
        return await ctx.send("📉 Aucun score de focus enregistré pour le moment.")

    sorted_users = sorted(user_stats.items(), key=lambda x: x[1], reverse=True)
    msg = "🏆 **Leaderboard Focus** 🧠\n"
    for i, (user_id, total) in enumerate(sorted_users[:10], start=1):
        user = await bot.fetch_user(int(user_id))
        heures = total // 60
        minutes = total % 60
        msg += f"**{i}.** {user.name} — {heures}h {minutes}min\n"
    await ctx.send(msg)

TOKEN = "MTQwMDIxNDI3MzQwOTQxNzI0Ng.GgJ94-.-VM47dY3J2T5cRlqGlEE2RFotQaH-dljTDsZQg"
bot.run(TOKEN)
